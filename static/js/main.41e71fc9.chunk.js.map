{"version":3,"sources":["components/NoMap.js","components/MapContainer.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["NoMap","state","show","timeout","componentDidMount","window","setTimeout","_this","showMessage","setState","componentWillUnmount","clearTimeout","render","react_default","a","createElement","React","Component","MapContainer","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","firstDrop","componentWillReceiveProps","props","length","pins","updateMarkers","selectedIndex","closeInfoWindow","onMarkerClick","console","log","fetchPlaces","mapProps","getBusinessInfo","data","response","venues","filter","item","name","includes","marker","e","url","concat","position","lat","lng","headers","Headers","request","Request","method","fetch","then","json","result","restaurant","Object","objectSpread","foursquare","id","images","photos","setAnimation","google","maps","Animation","BOUNCE","catch","alert","forEach","setMap","location","index","mProps","key","pos","push","Marker","draggable","animation","DROP","addListener","center","lon","dist","role","aria-label","onReady","zoom","style","width","height","initialCenter","onClick","visible","onClose","src","items","prefix","suffix","alt","href","target","rel","GoogleApiWrapper","apiKey","LoadingContainer","List","open","query","updateQuery","newQuery","filterLocations","Drawer_default","toggleDrawer","type","placeholder","onChange","value","clickButton","App","Pins","filtered","toLowerCase","process","className","Button_default","variant","color","this","aria-labelledby","components_MapContainer","List_List","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","gm_authFailure","ReactDOM","document","getElementById","BrowserRouter","basename","src_App_0","URL","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41e71fc9.chunk.js","sourcesContent":["import React from 'react';\n\nclass NoMap extends React.Component {\n  state = {\n    show: false,\n    timeout: null\n  }\n\n  componentDidMount = () => {\n    let timeout = window.setTimeout(this.showMessage, 1000);\n    this.setState({timeout});\n  }\n\n  componentWillUnmount = () => {\n    window.clearTimeout(this.state.timeout);\n  }\n\n  showMessage = () => {\n    this.setState({show: true});\n  }\n\n  render = () => {\n    return (\n      <div>\n        {this.state.show ? (<h1>Oops! We're having trouble loading the map</h1>) : (<h1>Loading map...</h1>)}\n      </div>\n    )\n  }\n}\n\nexport default NoMap;\n","import React from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport NoMap from './NoMap';\n\nclass MapContainer extends React.Component {\n  state = {\n    map: null,\n    markers: [],\n    markerProps: [],\n    activeMarker: null,\n    activeMarkerProps: null,\n    showingInfoWindow: false,\n    firstDrop: true\n  }\n\n  componentWillReceiveProps = (props) => {\n    this.setState({firstDrop: false});\n\n    // Update markers if number of pins change\n    if (this.state.markers.length !== props.pins.length) {\n      this.updateMarkers(props.pins);\n      this.setState({activeMarker: null});\n      return;\n    }\n\n    if (!props.selectedIndex || (this.state.activeMarker && (this.state.markers[props.selectedIndex] !== this.state.activeMarker))) {\n      this.closeInfoWindow();\n    }\n\n    if (props.selectedIndex === null || typeof(props.selectedIndex) === \"undefined\") {\n      return;\n    }\n\n    this.onMarkerClick(this.state.markerProps[props.selectedIndex], this.state.markers[props.selectedIndex]);\n\n    console.log(this.state.markerProps[props.selectedIndex]); console.log(this.state.markers[props.selectedIndex]);\n  }\n\n  fetchPlaces = (mapProps, map) => {\n    this.setState({map});\n    this.updateMarkers(this.props.pins);\n  }\n\n  getBusinessInfo = (props, data) => {\n    return data\n      .response\n      .venues\n      .filter(item => item.name.includes(props.name) || props.name.includes(item.name));\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    // Foursquare API call\n    let url = `https://api.foursquare.com/v2/venues/search?client_id=GIBYX5MXP3ZKH5WIMXHK00A4NCXX5HLZGKVYJ4IYLWOTCLGR&client_secret=FPTOTCYNLM5DXZDGBPK02K4AA3Z45CNVYEE5EW1EKKZGRI53&v=20180323&radius=100&ll=${props.position.lat},${props.position.lng}`;\n    let headers = new Headers();\n    let request = new Request(url, {\n      method: 'GET',\n      headers\n    })\n\n    let activeMarkerProps;\n    fetch(request)\n        .then(response => response.json())\n        .then(result => {\n          let restaurant = this.getBusinessInfo(props, result);\n          activeMarkerProps = {\n            ...props,\n            foursquare: restaurant[0]\n          };\n\n          if (activeMarkerProps.foursquare) {\n            let url = `https://api.foursquare.com/v2/venues/${restaurant[0].id}/photos?client_id=GIBYX5MXP3ZKH5WIMXHK00A4NCXX5HLZGKVYJ4IYLWOTCLGR&client_secret=FPTOTCYNLM5DXZDGBPK02K4AA3Z45CNVYEE5EW1EKKZGRI53&v=20180323`;\n            fetch(url)\n              .then(response => response.json())\n              .then(result => {\n                activeMarkerProps = {\n                  ...activeMarkerProps,\n                  images: result.response.photos\n                };\n                if (this.state.activeMarker)\n                  this.state.activeMarker.setAnimation(null);\n                  marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n                  this.setState({\n                    showingInfoWindow: true,\n                    activeMarker: marker,\n                    activeMarkerProps\n                  });\n              })\n          } else {\n            this.setState({\n              showingInfoWindow: true,\n              activeMarker: marker,\n              activeMarkerProps\n            });\n          }\n        })\n        .catch(() => {\n          alert('Sorry for the inconvenience, but the Foursquare API is currently having issues');\n        });\n  }\n\n  closeInfoWindow = () => {\n    this.state.activeMarker && this.state.activeMarker.setAnimation(null);\n    this.setState({\n      showingInfoWindow: false,\n      activeMarker: null,\n      activeMarkerProps: null\n    })\n  }\n\n  updateMarkers = (pins) => {\n    this.closeInfoWindow();\n    this.state.markers.forEach(marker => marker.setMap(null));\n    let markerProps = [];\n    let markers = pins.map((location, index) => {\n      let mProps = {\n        key: index,\n        index,\n        name: location.name,\n        position: location.pos,\n        url: location.url\n      };\n      markerProps.push(mProps);\n      let marker = new this.props.google.maps.Marker({\n        position: location.pos,\n        map: this.state.map,\n        draggable: false,\n        animation: this.props.google.maps.Animation.DROP\n      });\n      marker.addListener('click', () => {\n        this.onMarkerClick(mProps, marker, null);\n      })\n      return marker;\n    })\n    this.setState({markers, markerProps});\n  }\n\n  render = () => {\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    const center = {\n      lat: this.props.lat,\n      lng: this.props.lon\n    }\n\n    return (\n      <Map\n        role=\"application\"\n        aria-label=\"map\"\n        onReady={this.fetchPlaces}\n        google={this.props.google}\n        zoom={this.props.zoom}\n        style={style}\n        initialCenter={center}\n        onClick={this.closeInfoWindow}>\n\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.closeInfoWindow}>\n          <div>\n            <h3>{this.state.activeMarkerProps && this.state.activeMarkerProps.name}</h3>\n            {this.state.activeMarkerProps && this.state.activeMarkerProps.images ? (\n              <div>\n                <img src={this.state.activeMarkerProps.images.items[0].prefix + \"100x100\" + this.state.activeMarkerProps.images.items[0].suffix} alt={this.state.activeMarkerProps.name} />\n                <p>Photo from Foursquare</p>\n              </div>\n            ) : \"\"}\n            <a href={this.state.activeMarkerProps && this.state.activeMarkerProps.url} target=\"_blank\" rel=\"noopener noreferrer\">Website</a>\n          </div>\n        </InfoWindow>\n      </Map>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyC_UFVqPw6ebSn8Xnjq0f0UFM5-aGsyHVE\", LoadingContainer: NoMap })(MapContainer)\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\n\nexport default class List extends React.Component {\n  state = {\n    open: false,\n    query: \"\"\n  }\n\n  updateQuery = (newQuery) => {\n    this.setState({ query: newQuery });\n    this.props.filterLocations(newQuery);\n  }\n\n  render = () => {\n    return (\n      <Drawer open={this.props.open} onClose={this.props.toggleDrawer}>\n        <section>\n          <input\n            type=\"text\"\n            name=\"filter\"\n            placeholder=\"Filter locations\"\n            aria-label=\"Filter locations\"\n            onChange={ e => this.updateQuery(e.target.value) }\n            value={this.state.query} />\n          <ul>\n            {this.props.pins && this.props.pins.map((location, index) => {\n              return (\n                <li key={index} aria-label={location.name}>\n                  <button key={index} onClick={e => this.props.clickButton(index)}>{location.name}</button>\n                </li>\n              )\n            })}\n          </ul>\n        </section>\n      </Drawer>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport MapContainer from './components/MapContainer';\nimport Pins from './data/pins';\nimport List from './components/List';\nimport Button from '@material-ui/core/Button';\n\n// Thank you to Doug Brown for an excellent walk-through https://www.youtube.com/watch?v=NVAVLCJwAAo&feature=youtu.be\nclass App extends React.Component {\n  state = {\n    lat: 27.1983121,\n    lon: -80.256597,\n    zoom: 16.5,\n    pins: Pins,\n    open: false,\n    selectedIndex: null\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      ...this.state,\n      filtered: this.filterLocations(this.state.pins, \"\")\n    });\n  }\n\n  toggleDrawer = () => {\n    this.setState({\n      open: !this.state.open\n    })\n  }\n\n  updateQuery = (query) => {\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.pins, query)\n    });\n  }\n\n  filterLocations = (pins, query) => {\n    return pins.filter(location => location.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  clickButton = (index) => {\n    this.setState({ selectedIndex: index, open: !this.state.open });\n  }\n\n  render() {\n    console.log(process.env.PUBLIC_URL);\n    return (\n      <div className=\"App\">\n        <header>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.toggleDrawer} aria-labelledby=\"Menu\" className=\"menu\">\n            Menu\n          </Button>\n          <h1>Stuart, Florida</h1>\n        </header>\n        <MapContainer\n          lat={this.state.lat}\n          lon={this.state.lon}\n          zoom={this.state.zoom}\n          pins={this.state.filtered}\n          clickButton={this.clickButton}\n          selectedIndex={this.state.selectedIndex}\n        />\n        <List\n          pins={this.state.filtered}\n          open={this.state.open}\n          toggleDrawer={this.toggleDrawer}\n          filterLocations={this.updateQuery}\n          clickButton={this.clickButton}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nwindow.gm_authFailure = () => {\n  ReactDOM.render(\n    <h2>We're having trouble loading the Google Map. Please make sure you're connected to the internet and try again later.</h2>,\n    window.document.getElementById('root'));\n}\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}